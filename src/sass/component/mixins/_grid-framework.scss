// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }
  // Common properties for all breakpoints
  .col, [class |= col] {
    position: relative;
    width: 100%;
    // padding-right: $gutter / 2;
    // padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @if $enable-rwd-container and $infix != '' {
      .container#{$infix} {
        @extend .container-fluid;
      }
    }

    //! Use  [class |= col] to replace each column default setting
    // @if $columns > 0 {
    //   // Allow columns to stretch full width below their breakpoints
    //   @for $i from 1 through $columns {
    //     .col#{$infix}-#{$i} {
    //       @extend %grid-column;
    //     }
    //   }
    // }

    // .col#{$infix},
    // .col#{$infix}-auto {
    //   @extend %grid-column;
    // }

    $extend-breakpoint: true;
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if map-get($container-max-widths, $breakpoint) {
        %responsive-container#{$infix} {
          max-width: map-get($container-max-widths , $breakpoint);
        }
        .wrap, .container {
          @extend %responsive-container#{$infix};
        }
        @if $enable-rwd-container {
          @each $name, $width in $container-max-widths {
            @if ($extend-breakpoint) {
              .container-#{if($enable-rwd-container, $name, '')} {
                @extend %responsive-container#{$infix};
              }
              // Once the current breakpoint is reached, stop extending
              @if ($breakpoint == $name) {
                $extend-breakpoint: false;
              }
            }
          }
        }
      }

      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }
      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .contents#{$infix}-#{$i} {
            @if $columns % $i == 0 { & > * { @extend .col#{$infix}-#{$columns/$i}; } }
            @else { @include row-cols($i); }
          }
        }
      }

      @if $enable-flex-order {
      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }
      }

      @if $columns > 0 and $enable-columns-offset {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns) {
          @if not ($infix == "" and $i == 12) { // Avoid emitting useless .offset-0
            .col-ml#{$infix}-#{$i} {
              @include make-col-ml($i, $columns);
            }
            .col-mr#{$infix}-#{$i} {
              @include make-col-mr($i, $columns);
          }

          }
        }
      }
    }
  }
}
