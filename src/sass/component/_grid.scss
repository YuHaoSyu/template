// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
.wrap,
.wrap-fluid {
  width: 100%;
  display: flex;
  margin-right: auto;
  margin-left: auto;
  flex: 1 0 100%;
  flex-wrap: wrap;
}

// @if $enable-grid-classes {
//   // Single container class with breakpoint max-widths
//   .container,
//   // 100% wide container at all breakpoints
//   .container-fluid {
//     @include make-container();
//   }

//   // Responsive containers that are 100% wide until a breakpoint
//   @each $breakpoint, $container-max-width in $container-max-widths {
//     .container-#{$breakpoint} {
//       @extend .container-fluid;
//     }

//     @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
//       %responsive-container-#{$breakpoint} {
//         max-width: $container-max-width;
//       }

//       // Extend each breakpoint which is smaller or equal to the current breakpoint
//       $extend-breakpoint: true;

//       @each $name, $width in $grid-breakpoints {
//         @if ($extend-breakpoint) {
//           .container#{breakpoint-infix($name, $grid-breakpoints)} {
//             @extend %responsive-container-#{$breakpoint};
//           }

//           // Once the current breakpoint is reached, stop extending
//           @if ($breakpoint == $name) {
//             $extend-breakpoint: false;
//           }
//         }
//       }
//     }
//   }
// }

// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();
  }

  // .wrap,.wrap-fluid {
  //   display: flex;
  //   flex: 1 0 100%;
  //   flex-wrap: wrap;
  // }
  .row, .wrap, .wrap-fluid {
    > *{
      max-width: 100%;
      padding: 0 #{$grid-gutter-width / 2};
    }
  }
  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  // .clean-gutters {
  //   margin-right: 0;
  //   margin-left: 0;


  //   > [class|="col"] {
  //     padding-right: 0;
  //     padding-left: 0;
  //   }
  // }
  @each $key, $value in $spacers {
    @if $key < 10 {
      .g-#{$key}, .gx-#{$key} {
        margin-right: -$value/2;
        margin-left: -$value/2;
        > * {
          padding-right: $value/2;
          padding-left: $value/2;
        }
      }
      .g-#{$key}, .gy-#{$key}{
        margin-top: -$value;
        > * {
          margin-top: $value;
        }
      }
    }
    // .gy-#{$gutter}{
    //   > [class |= col] {
    //     padding: 0 $gutter * $grid-gutter-width / 2;
    //   }
    // }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include make-grid-columns();
}
